name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '5.9'
    
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Verify Swift installation
      run: |
        echo "=== Swift Environment Check ==="
        swift --version
        swiftc --version
        which swift
        which swiftc
        echo "Platform: $(uname -a)"
        echo "Xcode version: $(xcode-select --print-path)"
        xcodebuild -version || echo "xcodebuild not available"
        echo "Swift setup completed successfully"
    
    - name: Debug Package Dependencies
      run: |
        echo "=== Package Dependencies Debug ==="
        echo "Checking Package.swift dependencies..."
        swift package describe || echo "Package describe failed"
        echo ""
        echo "Checking for Package.resolved:"
        if [ -f Package.resolved ]; then
          echo "Package.resolved exists:"
          cat Package.resolved
        else
          echo "Package.resolved does not exist"
        fi
        echo ""
        echo "Resolving dependencies..."
        swift package resolve || echo "Package resolve failed"
    
    - name: Build project for tests
      run: |
        echo "=== Starting Build Process ==="
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Package.swift contents:"
        cat Package.swift
        echo ""
        echo "Starting swift build with verbose output..."
        # First ensure the project builds successfully
        if swift build --verbose 2>&1 | tee build.log; then
          echo ""
          echo "=== Build completed successfully ==="
        else
          echo ""
          echo "=== BUILD FAILED ==="
          echo "Exit code: $?"
          echo "Last 50 lines of build log:"
          tail -50 build.log || echo "Could not read build log"
          echo ""
          echo "Checking for common build issues..."
          
          # Check for specific error patterns
          if grep -i "error.*not found" build.log; then
            echo "❌ Missing dependency detected"
          fi
          if grep -i "permission denied" build.log; then
            echo "❌ Permission issue detected"
          fi
          if grep -i "unavailable" build.log; then
            echo "❌ API unavailability detected"
          fi
          if grep -i "deprecated" build.log; then
            echo "⚠️  Deprecated API usage detected"
          fi
          
          exit 1
        fi
    
    - name: Run CI-safe tests
      run: |
        echo "=== Starting CI-safe Tests ==="
        echo "Available test targets:"
        swift test --list-tests || echo "Could not list tests"
        echo ""
        echo "Running CITests with verbose output..."
        # Run only CI-safe tests that don't require file system operations
        if swift test --filter CITests --verbose 2>&1 | tee test.log; then
          echo ""
          echo "=== CI tests completed successfully ==="
        else
          echo ""
          echo "=== TESTS FAILED ==="
          echo "Exit code: $?"
          echo "Last 50 lines of test log:"
          tail -50 test.log || echo "Could not read test log"
          echo ""
          echo "Checking for common test issues..."
          
          # Check for specific test error patterns
          if grep -i "test.*failed" test.log; then
            echo "❌ Test failures detected"
          fi
          if grep -i "compilation failed" test.log; then
            echo "❌ Test compilation failed"
          fi
          if grep -i "no tests ran" test.log; then
            echo "❌ No tests executed"
          fi
          
          exit 1
        fi
    
    - name: Test Environment Debug (on failure)
      if: failure()
      run: |
        echo "=== FAILURE ENVIRONMENT DEBUG ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Build directory contents:"
        ls -la .build/ || echo "No .build directory"
        echo ""
        echo "Environment variables:"
        env | grep -E "(SWIFT|XCODE|PATH)" || echo "No relevant env vars found"
        echo ""
        echo "Process list (Swift related):"
        ps aux | grep -i swift || echo "No Swift processes"
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Memory usage:"
        vm_stat || echo "vm_stat not available"
    
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: release-test-logs
        path: |
          build.log
          test.log
        retention-days: 7
    
    - name: Build release binary
      run: |
        echo "Building release binary..."
        swift build -c release --verbose
        
        # Find and copy the binary
        BINARY_PATH=$(find .build -name "vox" -type f -path "*/release/*" | head -1)
        if [ -z "$BINARY_PATH" ]; then
          echo "ERROR: Could not find release binary"
          find .build -name "vox" -type f
          exit 1
        fi
        
        echo "Found binary at: $BINARY_PATH"
        mkdir -p dist
        cp "$BINARY_PATH" dist/vox
        chmod +x dist/vox
        
        # Verify binary
        echo "Binary info:"
        ls -la dist/vox
        file dist/vox
        
        # Test binary
        if ./dist/vox --help > /dev/null 2>&1; then
          echo "✅ Binary test successful"
        else
          echo "⚠️ Binary test failed (may be normal in CI)"
        fi
    
    - name: Create distribution packages
      run: |
        cd dist
        
        # Create archives
        tar -czf "vox-${{ steps.version.outputs.version }}-macos-universal.tar.gz" vox
        zip "vox-${{ steps.version.outputs.version }}-macos-universal.zip" vox
        
        # Generate checksums
        shasum -a 256 *.tar.gz *.zip > checksums.txt
        
        echo "Created packages:"
        ls -la
        echo "Checksums:"
        cat checksums.txt
    
    - name: Generate release notes
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Changes since $PREVIOUS_TAG:" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
        else
          echo "Release ${{ steps.version.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "Initial release features:" >> release_notes.md
          echo "- MP4 video audio extraction" >> release_notes.md
          echo "- Native macOS speech transcription" >> release_notes.md
          echo "- Cloud API fallback support" >> release_notes.md
          echo "- Multiple output formats (TXT, SRT, JSON)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Homebrew (Recommended)" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "brew tap jsonify/vox" >> release_notes.md
        echo "brew install vox" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Manual Installation" >> release_notes.md
        echo "Download and extract the archive, then:" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "sudo mv vox /usr/local/bin/" >> release_notes.md
        echo "vox --help" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
        echo "Release notes:"
        cat release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Vox CLI ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          dist/vox-${{ steps.version.outputs.version }}-macos-universal.tar.gz
          dist/vox-${{ steps.version.outputs.version }}-macos-universal.zip
          dist/checksums.txt