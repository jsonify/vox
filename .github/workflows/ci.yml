name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]  # Target macOS 14+ only
        swift-version: ['5.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}
    
    - name: Verify Swift installation
      run: |
        echo "=== Swift Environment Check ==="
        swift --version
        swiftc --version
        which swift
        which swiftc
        echo "Platform: $(uname -a)"
        echo "Xcode version: $(xcode-select --print-path)"
        xcodebuild -version || echo "xcodebuild not available"
        echo "Swift setup completed successfully"
    
    - name: Debug Package Dependencies
      run: |
        echo "=== Package Dependencies Debug ==="
        echo "Checking Package.swift dependencies..."
        swift package describe || echo "Package describe failed"
        echo ""
        echo "Checking for Package.resolved:"
        if [ -f Package.resolved ]; then
          echo "Package.resolved exists:"
          cat Package.resolved
        else
          echo "Package.resolved does not exist"
        fi
        echo ""
        echo "Resolving dependencies..."
        swift package resolve || echo "Package resolve failed"
    
    - name: Cache Swift dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build project
      run: |
        echo "=== Starting Build Process ==="
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Package.swift contents:"
        cat Package.swift
        echo ""
        echo "Starting swift build with verbose output..."
        # First ensure the project builds successfully
        if swift build --verbose 2>&1 | tee build.log; then
          echo ""
          echo "=== Build completed successfully ==="
        else
          echo ""
          echo "=== BUILD FAILED ==="
          echo "Exit code: $?"
          echo "Last 50 lines of build log:"
          tail -50 build.log || echo "Could not read build log"
          echo ""
          echo "Checking for common build issues..."
          
          # Check for specific error patterns
          if grep -i "error.*not found" build.log; then
            echo "❌ Missing dependency detected"
          fi
          if grep -i "permission denied" build.log; then
            echo "❌ Permission issue detected"
          fi
          if grep -i "unavailable" build.log; then
            echo "❌ API unavailability detected"
          fi
          if grep -i "deprecated" build.log; then
            echo "⚠️  Deprecated API usage detected"
          fi
          
          exit 1
        fi
    
    - name: Run CI-safe tests
      run: |
        echo "=== Starting CI-safe Tests ==="
        echo "Available test targets:"
        swift test --list-tests || echo "Could not list tests"
        echo ""
        echo "Running CITests with verbose output..."
        # Run only CI-safe tests that don't require file system operations
        if swift test --filter CITests --verbose 2>&1 | tee test.log; then
          echo ""
          echo "=== CI tests completed successfully ==="
        else
          echo ""
          echo "=== TESTS FAILED ==="
          echo "Exit code: $?"
          echo "Last 50 lines of test log:"
          tail -50 test.log || echo "Could not read test log"
          echo ""
          echo "Checking for common test issues..."
          
          # Check for specific test error patterns
          if grep -i "test.*failed" test.log; then
            echo "❌ Test failures detected"
          fi
          if grep -i "compilation failed" test.log; then
            echo "❌ Test compilation failed"
          fi
          if grep -i "no tests ran" test.log; then
            echo "❌ No tests executed"
          fi
          
          exit 1
        fi
    
    - name: Environment Debug (on failure)
      if: failure()
      run: |
        echo "=== FAILURE ENVIRONMENT DEBUG ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Build directory contents:"
        ls -la .build/ || echo "No .build directory"
        echo ""
        echo "Environment variables:"
        env | grep -E "(SWIFT|XCODE|PATH)" || echo "No relevant env vars found"
        echo ""
        echo "Process list (Swift related):"
        ps aux | grep -i swift || echo "No Swift processes"
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Memory usage:"
        vm_stat || echo "vm_stat not available"
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ci-logs-${{ matrix.os }}
        path: |
          build.log
          test.log
        retention-days: 7

  lint:
    name: SwiftLint
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging || echo "SwiftLint completed with warnings"


  build-validation:
    name: Build Validation
    runs-on: macos-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '5.9'
    
    - name: Verify Build Environment
      run: |
        echo "=== Build Validation Environment Check ==="
        swift --version
        swiftc --version
        which swift
        which swiftc
        echo "Platform: $(uname -a)"
        echo "Xcode version: $(xcode-select --print-path)"
        xcodebuild -version || echo "xcodebuild not available"
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Build validation environment verified"
    
    - name: Debug Release Dependencies
      run: |
        echo "=== Release Build Dependencies Debug ==="
        echo "Checking Package.swift for release build..."
        cat Package.swift
        echo ""
        echo "Resolving dependencies for release build..."
        swift package resolve || echo "Package resolve failed"
        echo ""
        echo "Package describe for release build:"
        swift package describe || echo "Package describe failed"
    
    - name: Build universal binary
      run: |
        echo "=== Building Universal Binary ==="
        echo "Using build.sh to create universal binary with both ARM64 and x86_64 architectures"
        echo "Working directory: $(pwd)"
        
        # Set environment variables for CI-friendly build
        export SKIP_PACKAGING=true  # We'll handle packaging separately
        
        if ./build.sh 2>&1 | tee universal-build.log; then
          echo ""
          echo "=== Universal Binary Build Complete ==="
          echo "Build exit code: $?"
          
          # Verify the universal binary was created
          if [ -f "dist/vox" ]; then
            echo "✅ Universal binary created successfully"
            echo "Binary info:"
            ls -la dist/vox
            file dist/vox
            lipo -info dist/vox
            
            # Verify both architectures are present
            if lipo -info dist/vox | grep -q "arm64" && lipo -info dist/vox | grep -q "x86_64"; then
              echo "✅ Both ARM64 and x86_64 architectures confirmed"
            else
              echo "❌ Missing required architectures"
              lipo -info dist/vox
              exit 1
            fi
          else
            echo "❌ Universal binary not found at dist/vox"
            echo "Directory contents:"
            ls -la
            ls -la dist/ || echo "No dist directory"
            exit 1
          fi
        else
          echo ""
          echo "=== UNIVERSAL BINARY BUILD FAILED ==="
          echo "Exit code: $?"
          echo "Last 50 lines of build log:"
          tail -50 universal-build.log || echo "Could not read build log"
          echo ""
          echo "Checking for common build issues..."
          
          # Check for specific error patterns
          if grep -i "error.*not found" universal-build.log; then
            echo "❌ Missing dependency detected"
          fi
          if grep -i "permission denied" universal-build.log; then
            echo "❌ Permission issue detected"
          fi
          if grep -i "unavailable" universal-build.log; then
            echo "❌ API unavailability detected"
          fi
          if grep -i "architecture" universal-build.log; then
            echo "❌ Architecture issue detected"
          fi
          if grep -i "lipo" universal-build.log; then
            echo "❌ Universal binary creation failed"
          fi
          
          exit 1
        fi
    
    - name: Verify universal binary
      run: |
        echo "=== Verifying Universal Binary ==="
        
        if [ -f "dist/vox" ]; then
          echo "✅ Universal binary exists at dist/vox"
          
          # Show detailed binary information
          echo "Binary size: $(du -h dist/vox | cut -f1)"
          echo "Binary file info:"
          file dist/vox
          
          # Verify architectures
          echo "Architecture info:"
          lipo -info dist/vox
          
          # Verify both required architectures are present
          if lipo -info dist/vox | grep -q "arm64" && lipo -info dist/vox | grep -q "x86_64"; then
            echo "✅ Universal binary contains both ARM64 and x86_64 architectures"
          else
            echo "❌ Universal binary missing required architectures"
            echo "Expected: arm64 and x86_64"
            echo "Found: $(lipo -info dist/vox)"
            exit 1
          fi
          
          # Verify binary is executable
          if [ -x "dist/vox" ]; then
            echo "✅ Binary is executable"
          else
            echo "❌ Binary is not executable"
            ls -la dist/vox
            exit 1
          fi
          
          # Verify checksum file exists
          if [ -f "dist/checksum.txt" ]; then
            echo "✅ Checksum file exists"
            echo "Checksum: $(cat dist/checksum.txt)"
          else
            echo "⚠️  Checksum file not found (not critical)"
          fi
          
        else
          echo "❌ Universal binary not found at dist/vox"
          echo "Directory contents:"
          ls -la
          ls -la dist/ || echo "No dist directory found"
          exit 1
        fi
        
        echo ""
        echo "Universal binary verification completed successfully"
    
    - name: Test CLI functionality
      run: |
        echo "=== Testing CLI Functionality ==="
        
        if [ -f "dist/vox" ]; then
          # Test basic help command
          echo "Testing --help command..."
          if timeout 10s ./dist/vox --help >/dev/null 2>&1; then
            echo "✅ Help command works"
          else
            echo "⚠️  Help command failed or timed out (may be normal in CI)"
          fi
          
          # Test version command if available
          echo "Testing --version command..."
          if timeout 10s ./dist/vox --version >/dev/null 2>&1; then
            echo "✅ Version command works"
          else
            echo "⚠️  Version command failed or timed out (may be normal in CI)"
          fi
          
          echo "✅ Basic CLI functionality testing completed"
        else
          echo "❌ Cannot test CLI functionality - binary not found"
          exit 1
        fi
    
    - name: Build Validation Debug (on failure)
      if: failure()
      run: |
        echo "=== BUILD VALIDATION FAILURE DEBUG ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Build directory contents:"
        ls -la .build/ || echo "No .build directory"
        echo ""
        echo "Release build directory:"
        ls -la .build/x86_64-apple-macosx/release/ || echo "No release directory"
        echo ""
        echo "Environment variables:"
        env | grep -E "(SWIFT|XCODE|PATH)" || echo "No relevant env vars found"
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Memory usage:"
        vm_stat || echo "vm_stat not available"
    
    - name: Upload build validation logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-validation-logs
        path: |
          universal-build.log
          release-build.log
          debug-build.log
        retention-days: 7
    
    - name: Upload build artifacts
      if: success()
      run: |
        echo "=== Build Artifacts ==="
        echo "Skipping artifact upload - no universal binary created"
        echo "Build validation completed successfully"
